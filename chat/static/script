  <script>
      var chatSocket = null;
      var ntfSocket = null;
      var ap = null;
      var my_os = 'pc';
      var os = function () {
          var ua = navigator.userAgent,
              isWindowsPhone = /(?:Windows Phone)/.test(ua),
              isSymbian = /(?:SymbianOS)/.test(ua) || isWindowsPhone,
              isAndroid = /(?:Android)/.test(ua),
              isFireFox = /(?:Firefox)/.test(ua),
              isChrome = /(?:Chrome|CriOS)/.test(ua),
              isTablet = /(?:iPad|PlayBook)/.test(ua) || (isAndroid && !/(?:Mobile)/.test(ua)) || (isFireFox && /(?:Tablet)/.test(ua)),
              isPhone = /(?:iPhone)/.test(ua) && !isTablet,
              isPc = !isPhone && !isAndroid && !isSymbian;
          return {
              isTablet: isTablet,
              isPhone: isPhone,
              isAndroid: isAndroid,
              isPc: isPc,
              isChrome: isChrome
          };
      }();

      $('.sidebar-body').on('click', 'li', function () {
          $('.homebox').hide();
          $(this).siblings('li').removeClass('open-chat');
          $(this).siblings('li').removeClass('disabled');
          $(this).addClass('open-chat');
          $(this).addClass('disabled');
          $(this).addClass('animate__animated animate__fadeInLeft');
          $(this).find('#id_badge_ntf').html('');
          $('#chat-message-submit').attr('channel_no', $(this).attr('channel_no'));
          if (my_os === 'mobile') {
              $('.sidebar-close').click();
          }
          var channel_no = $(this).attr('channel_no');
          var profile_id = $(this).attr('profile_id');
          console.log('sidebar-body channel_no' + channel_no);
          if (isNaN(channel_no)) {
              chatSocket = joinRoom(channel_no);
          } else {
              joinSingle(channel_no, profile_id);
          }
      });

      function notificationConnect(uid) {
          if (!window.localStorage.token) {
              window.location.href = '/login/'
          } else {
              if (uid === undefined) {
                  return false
              } else {
                  ntfSocket = new ReconnectingWebSocket(
                      'ws://' + window.location.host +
                      '/ws/notification/' + uid + '/?token=Jwt ' + window.localStorage.token);
              }
          }
          ntfSocket.onopen = function (e) {
              // $('#id_online').html('Online')
          };
          ntfSocket.onmessage = function (e) {
              var data = JSON.parse(e.data);
              var msg_type = data['msg_type'];
              var channel_no = data['channel_no'];
              console.log('aaa', channel_no);
              console.log('onmessage', msg_type);
              if (msg_type === 'push_message') {
                  var that = $('li[channel_no=%s]'.format(channel_no)).find('#id_badge_ntf');
                  var count = parseInt(that.html()) || 0;
                  count += 1;
                  that.html(count);
                  Lobibox.notify(
                      // 'warning', 'info', 'success', 'error'
                      'error',
                      {
                          title: data['send_user_nick_name'],
                          size: 'normal',
                          showClass: 'flipInX',
                          hideClass: 'zoomOutDown',
                          msg: data['message'],
                          icon: false,
                          delay: 6000,
                          img: data['img'],
                          closable: true,
                          closeOnClick: true,
                          soundPath: '/src/sounds/',

                      }
                  );
              } else if (msg_type === 'chat_message') {
                  parseChatMsg(data);
              }
          };
          ntfSocket.onclose = function (e) {
              $('#id_online').html('Outline');
              xtip.msg('连接断开，请刷新重试')
          };
          ntfSocket.onerror = function (e) {
              $('#id_online').html('Outline');
              console.log('Socket is onerror.', e.reason);
              ntfSocket.close()
          };
          return ntfSocket

      function wsConnect(channel_no) {
          if (!window.localStorage.token) {
              window.location.href = '/login/'
          } else {
              if (channel_no === undefined) {
                  return false
              } else {
                  chatSocket = new ReconnectingWebSocket(
                      'ws://' + window.location.host +
                      '/ws/chat/' + channel_no + '/?token=Jwt ' + window.localStorage.token);
              }
          }

          chatSocket.onopen = function (e) {

              if (channel_no.slice(0, 2) === 'GP') {
                  let username = "{{ user.profile.nick_name }}";
                  chatSocket.send(JSON.stringify({
                      'message': username + '  加入',
                      'msg_type': 'chat_info'
                  }));
              } else if (channel_no.slice(0, 2) === 'MC') {
                  let username = "{{ user.profile.nick_name }}";
                  chatSocket.send(JSON.stringify({
                      'message': username + '  加入',
                      'msg_type': 'chat_info'
                  }));
                  chatSocket.send(JSON.stringify({
                      'message': 'init_data',
                      'action': 'init_data',
                      'msg_type': 'chat_music'
                  }));
                  if(my_os==='pc'){
                     $('[data-navigation-target="music-info"]').click()
                  }

              }

          };
          chatSocket.onmessage = function (e) {
              var data = JSON.parse(e.data);
              parseChatMsg(data)
          };
          chatSocket.onclose = function (e) {
              console.log('Socket is closed.');
          };
          chatSocket.onerror = function (e) {
              console.log('Socket is onerror.', e.reason);
              chatSocket.close()
          };
          return true
      }

      //渲染返回的数据
      function parseChatMsg(data) {
          var message = data['message'];
          var msg_type = data['msg_type'];
          var user_id = data['user_id'];
          var send_time = data['send_time'];
          var me = window.localStorage.user_id;
          if (message) {
              if (msg_type === 'chat_message') {
                  if (user_id === me) {
                      {#ChatosExamle.Message.add(message, 'inside-message', send_time);#}
                  } else {
                      ChatosExamle.Message.add(message, 'outgoing-message', send_time);
                  }
              } else if (msg_type === 'chat_html') {
                  ChatosExamle.Message.delete();
                  ChatosExamle.Info.add('稍等加载中...', '', '');
                  ChatosExamle.Info.add(message, '', '');
              } else if (msg_type === 'chat_music') {
                  var is_first = false
                  if (!window.ap) {
                      console.log('init ap')
                      window.ap = MusicPlayerInit('#music_list')
                      is_first = true
                  }
                  var action = data['action'];
                  var song_index = data['song_index']
                  console.log(action)
                  if (action === 'init_data' && is_first) {
                      ChatosExamle.Info.add('<div>1.输入 “点歌 歌名” 即可点歌。例如：点歌 旧城之王</br>2.如遇不好听的歌可以输入 例如：切歌 </div>', '', '');
                      if (message.length !== 0) {
                          ap.list.clear()
                          addMusicList(ap, message)
                          ap.play()
                          console.log(message[0].song_process)
                          window.seek_num = message[0].song_process
                          {#ap.seek(message[0].song_process)#}
                          console.log('ack歌曲播放进度')
                          //ack 歌曲播放进度
                          chatSocket.send(JSON.stringify({
                              'message': 'ack 歌曲播放进度',
                              'song_index': '',
                              'msg_type': 'chat_music',
                              'action': 'ack_song_process',
                          }));
                      }

                  } else if (action === 'add_song') {
                      console.log('action===\'add_song\'')
                      addMusicList(ap, message)

                  } else if (action === 'reload_song_url') {
                      addMusicList(ap, message, song_index)
                  } else if (action === 'tips') {
                      xtip.msg('找不到歌曲，或歌曲已存在。')
                  } else if (action === 'switch_next_song') {
                      ap.list.remove(ap.list.index)
                  } else if (action === 'syn_song_process') {
                      console.log('调节到', message)
                      window.seek_num = message;
                      ap.seek(message)
                  } else if (action === 'ack_song_process') {
                      // 回答自己歌曲播放进度 timeupdate
                      chatSocket.send(JSON.stringify({
                          'message': ap.audio.currentTime.toString(),
                          'song_index': '',
                          'msg_type': 'chat_music',
                          'action': 'syn_song_process',
                      }));
                  }

              } else {
                  // ChatosExamle.Info.add(message, '', '');
                  xtip.danmu(message)
              }
          } else {
              xtip.msg('不能输入空')
          }
      }

      function join(channel_no) {
          ChatosExamle.Message.delete();
          var is_connect = wsConnect(channel_no);
          console.log('is_connect' + is_connect)
          if (is_connect) {
              getChatRoomInfo(channel_no);
              getChatLog(channel_no);
              $('.chatbox').show();
              return chatSocket
          }

      }

      function joinRoom(channel_no) {
          console.log('join ' + channel_no + chatSocket);
          if (chatSocket == null) {
              return join(channel_no)
          } else {
              switch (chatSocket.readyState) {
                  case 0: //CONNECTING
                      xtip.msg('切换过于频繁,稍后再试！');
                      return chatSocket;
                  case 1: //OPEN
                      chatSocket.close();
                      return join(channel_no);
                  case 2:
                      xtip.msg('正在关闭！');
                      return chatSocket;
                  case 3: // closed
                      join(channel_no);
                      return chatSocket;
              }
          }
      }

      function joinSingle(channel_no, profile_id) {
          console.log('joinSingle');
          ChatosExamle.Message.delete();
          getUserInfo(profile_id);
          getPersonalChatLog(channel_no);
          $('.chatbox').show();
      }

      var ChatosExamle = {
          Message: {
              add: function (message, type, send_time) {
                  var chat_body = $('.layout .content .chat .chat-body');
                  if (chat_body.length > 0) {
                      type = type ? type : '';
                      message = message ? message : '消息不能为空';
                      $('.layout .content .chat .chat-body .messages').append('<div class="message-item animate__animated animate__fadeInRight ' + type + '"><div class="message-content">' + message + '</div><div class="message-action">' + send_time + (type ? '<i class="ti-check"></i>' : '') + '</div></div>');
                      chat_body.scrollTop(chat_body.get(0).scrollHeight, -1)
                  }
              },
              delete: function () {
                  $('.layout .content .chat .chat-body .messages').empty()
              }
          },
          Info: {
              add: function (message, type, send_time) {
                  var chat_body = $('.layout .content .chat .chat-body');
                  if (chat_body.length > 0) {
                      type = type ? type : '';
                      message = message ? message : '消息不能为空';
                      $('.layout .content .chat .chat-body .messages').append('<div class="message-info animate__animated animate__rotateInDownLeft' + type + '"><div class="message-content">' + message + '</div><div class="message-action">' + send_time + (type ? '<i class="ti-check"></i>' : '') + '</div></div>');
                      chat_body.scrollTop(chat_body.get(0).scrollHeight, -1)
                  }
              }
          }
      };


      function xTipMsg(content, el_id) {
          xtip.tips(content, el_id, {
              bgcolor: '#e6e9e7',
              times: 2,
              pos: 'r',
          });
      }

      $('#chat-message-submit').click(function (e) {
          e.preventDefault();
          var messageInputDom = $('#chat-message-input');
          var message = messageInputDom.val();
          var channel_no = $('#chat-message-submit').attr('channel_no');
          var msg_type = 'chat_message';
          console.log('chat-message-submit channel_no' + channel_no, chatSocket);
          if (!isNaN(channel_no)) {
              chatSocket = ntfSocket;
          }
          if (channel_no.startsWith('MC_')) {
              msg_type = 'chat_music'
          }
          if (chatSocket != null && chatSocket.readyState === 1) {
              {#自己发的在回车就显示#}
              ChatosExamle.Message.add(message, 'inside-message', '');
              var now_song_id =''
              if(ap && ap.list.audios[ap.list.index]) {
                  now_song_id = ap.list.audios[ap.list.index].id
              }
              chatSocket.send(JSON.stringify({
                  'message': message,
                  'msg_type': msg_type,
                  'send_user_nick_name': "{{ user.profile.nick_name }}",
                  'send_to_user_uid': channel_no,
                  'now_song_id': now_song_id,
              }));
              messageInputDom.val('');
          } else {
              xtip.load('websocket 正在连接中或刷新页面试试。', {'times': 1})
          }

      });

      $('#id_create_group').click(function () {
          var room_name = $('#group_name').val();
          var room_description = $('#description').val();
          $.post('/api/chat_room/', {
              'room_name': room_name,
              'room_description': room_description
          }).success(function () {
              xtip.msg('创建群组成功');
              $('#newGroup').modal('hide')
          }).fail(function () {
              xtip.msg('创建群组失败')
          })
      });
      $('#id_group_info').on('click', function () {
          // 执行一些动作...
          console.log('asdsadasd')
      });
      $('#inviteFriends').on('show.bs.modal', function (e) {
          $('#id_my_friends_list').empty();
          var channel_no = $('#id_group').attr('channel_no');
          $.get('/api/friends/', {'channel_no': channel_no}).success(function (data) {
              $.each(data, function (k, v) {
                  $('#id_my_friends_list').append('<option value="%s">%s</option>\n'.format(v.id, v.nick_name || ''))
              })
          })
      });
      // edit_profile
      $('#editProfileModal').on('show.bs.modal', function () {
          var profile_id = "{{ user.profile.id }}"
          $.get('/api/user_info/%s/'.format(profile_id)).success(function (data) {
              $('#fullname').val(data.nick_name);
              $('#id_img').attr('src', data.img_path);
              $('#Uid').val(data.unicode_id);
              $('#about-text').val(data.signature);
              $('#city').val(data.city);
              $('#qq').val(data.qq_number);
              $('#is_use_qq_img').attr("checked", data.is_use_qq_img)

          })
      })
      $('#id_save_profile').on('click', function () {
          var profile_id = "{{ user.profile.id }}"
          var data = {
              'user': profile_id,
              'nick_name': $('#fullname').val(),
              'signature': $('#about-text').val(),
              'city': $('#city').val(),
              'qq_number': $('#qq').val(),
              'is_use_qq_img': $('#is_use_qq_img').prop('checked')
          }
          $.ajax({
              url: '/api/user_info/%s/'.format(profile_id),
              type: 'PUT',
              data: data,
              success: function () {
                  $('#editProfileModal').modal('hide')
                  xtip.msg('保存成功')
              },
              error: function (data) {
                  xtip.msg(data.responseText)
              }
          })
      })
      $('#id_invite_friends').click(function () {
          var my_friends_list = $('#id_my_friends_list').val();
          console.log(my_friends_list);
          var channel_no = $('#id_group').attr('channel_no');
          investFriendsToRoom(channel_no, my_friends_list);
      });
      var target_map = {
          'friends': getFriends,
          'chats': getChatRoome,
          'talks': getTalkLog,
      };
      // chat/frienfs/talk
      $(document).on("click", "[data-navigation-target]", function () {
          var target = $(this).attr('data-navigation-target');
          if ($.inArray(target, Object.keys(target_map)) !== -1) {
              target_map[target]()
          }

      });

      $('#id_find_group').click(function () {
          getAllChatRoome()
      });

      // 搜索群组时进群
      function joinChatroom(channel_no) {
          var my_friends_list = ['{{ user.id }}'];
          console.log('搜索群组时进群', channel_no);

          investFriendsToRoom(channel_no, my_friends_list)
      }

      $('#id_talks').on('click', 'figure,h5,p', function () {
          $('.talks').show();
      });

      function postTalk() {
          var content = $('#id_talk_content').val();
          $.ajax({
              url: '/api/talk_log/',
              type: 'post',
              data: {'content': content, 'profile': '{{user.profile.id}}'},
              success: function () {
                  xtip.msg('添加成功');
                  getTalkLog();
                  $('#addTalks').modal('hide')
              },
              error: function (data) {
                  xtip.msg(data.responseText)
              }
          })
      }

      function showData() {
          $.ajax({
              url: '/api/get_statistic/',
              type: 'get',
              success: function (data) {
                  console.log(data)
                  $('#total_user').html(data.total_user)
                  $('#total_room').html(data.total_room)
                  $('#total_online').html(data.total_online)
                  $('#total_history').html(data.total_history)
                  showArea('revenue-chart', data.area)
                  showLine('line-chart', data.line)
                  showBar('bar-chart', data.bar)
                  showDonut('sales-chart', data.donut)
              }
          })

      }

      //show
      function showArea(element, data) {
          // AREA CHART
          var area = new Morris.Area({
              element: element,
              resize: true,
              data: data,
              xkey: 'y',
              ykeys: ['item1', 'item2'],
              labels: ['单新增', '比总量差'],
              lineColors: ['#a0d0e0', '#3c8dbc'],
              hideHover: 'auto'
          });
      }

      function showLine(element, data) {
          // LINE CHART
          var line = new Morris.Line({
              element: element,
              resize: true,
              data: data,
              xkey: 'y',
              ykeys: ['item1'],
              labels: ['人数'],
              lineColors: ['#3c8dbc'],
              hideHover: 'auto'
          });
      }

      function showDonut(element, data) {
          //DONUT CHART
          var donut = new Morris.Donut({
              element: element,
              resize: true,
              colors: ["#3c8dbc", "#f56954", "#00a65a"],
              data: data,
              hideHover: 'auto'
          });
      }

      function showBar(element, data) {
          //BAR CHART
          var bar = new Morris.Bar({
              element: element,
              resize: true,
              data: data,
              barColors: ['#00a65a', '#f56954'],
              xkey: 'y',
              ykeys: ['a', 'b'],
              labels: ['单新增', '累计数量'],
              hideHover: 'auto'
          });
      }

      $(document).ready(function () {
          if (os.isAndroid || os.isPhone) {
              my_os = 'mobile'
          }
          getHistory();
          getChatRoome();
          var uid = "{{ user.profile.unicode_id }}";
          var ntfSocket = notificationConnect(uid);
          showData();
          $('.layout .content .chat .chat-body').niceScroll({cursorborderradius: "5px",});
          $(".talks").niceScroll({cursorcolor: "#e6e9e7"});

      });
  </script>